;;; -*- asm -*-
;;; (c) 2014 Henner Zeller <h.zeller@acm.org>
;;;
;;; This file is part of BeagleG. http://github.com/hzeller/beagleg
;;;
;;; Note: while the rest of beagleG is GPL v3.0, this file idiv.hp is granted
;;; the more permissible MIT license.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a copy
;;; of this software and associated documentation files (the "Software"), to deal
;;; in the Software without restriction, including without limitation the rights
;;; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;;; copies of the Software, and to permit persons to whom the Software is
;;; furnished to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included in
;;; all copies or substantial portions of the Software.
;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;;; THE SOFTWARE.


;;; Input: (hi || lo) = numerator, d = divisor
;;;        (We only support 32 bit / 32 bit, so hi needs to be zero).
;;; Output: lo := quotient, hi := remainder; d: untouched
;;;
;;; Uses: 3 registers; 96 .. 160 cycles (avg 128)
.macro idiv_macro
.mparam hi,lo, d
	;;  Unrolled loop of 32 division steps.
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d

	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d

	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d

	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
	_idiv_division_step hi, lo, d
.endm
	
;;; Internal division step for idiv_macro; uses between 3 and 5 cycles
;;; (hi || lo) - internal state; initially lo is numerator
;;;              then gradually becomes quotient, hi the remainder.
;;; d          - divisor
.macro _idiv_division_step
.mparam hi, lo, d
	add lo, lo, lo		;  c || lo := lo << 1          ; c : carry
	adc hi, hi, hi		;  c || hi := (hi || c) << 1
	;; If we'd support 64/32bit: now [add lo, lo, 0] [qbbs DO_SUB, lo, 0]
	qblt NO_SUBSTRACT, d, hi ; if (hi >= d) (i.e. skip if hi < d)
	set lo, 0		 ;   set the low bit
DO_SUB:	sub hi, hi, d		 ;   and substract divisor
NO_SUBSTRACT:
.endm
